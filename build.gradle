package ru.netology.test;

import com.codeborne.selenide.Configuration;
import com.codeborne.selenide.Selenide;
import org.junit.jupiter.api.*;
import org.openqa.selenium.Keys;

import java.time.Duration;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;

public class CardDeliveryTest {

    @BeforeAll
    static void setUpAll() {
        Configuration.browser = "chrome";
        Configuration.headless = true;
        Configuration.browserSize = "1280x800";
        Configuration.timeout = 15000;
    }

    @BeforeEach
    void setUp() {
        open("http://localhost:9999");
    }

    @AfterEach
    void tearDown() {
        Selenide.closeWebDriver();
    }

    @Test
    @DisplayName("Should successfully submit delivery form with valid data")
    void shouldSubmitValidDeliveryForm() {
        $("[data-test-id=city] input").setValue("Москва");
        $("[data-test-id=date] input").doubleClick().sendKeys(Keys.DELETE, getFutureDate(3));
        $("[data-test-id=name] input").setValue("Иван Иванов");
        $("[data-test-id=phone] input").setValue("+79270000000");
        $("[data-test-id=agreement]").click();
        $("button.button").click();

        $("[data-test-id=notification]")
                .shouldBe(visible, Duration.ofSeconds(15))
                .shouldHave(exactText("Успешно!\n" +
                        "Встреча успешно запланирована на " + getFutureDate(3)));
    }

    @Test
    @DisplayName("Should submit form with minimum days ahead")
    void shouldSubmitWithMinimumDays() {
        $("[data-test-id=city] input").setValue("Санкт-Петербург");
        $("[data-test-id=date] input").doubleClick().sendKeys(Keys.DELETE, getFutureDate(5));
        $("[data-test-id=name] input").setValue("Анна Петрова");
        $("[data-test-id=phone] input").setValue("+79271111111");
        $("[data-test-id=agreement]").click();
        $("button.button").click();

        $("[data-test-id=notification]")
                .shouldBe(visible, Duration.ofSeconds(15))
                .shouldHave(exactText("Успешно!\n" +
                        "Встреча успешно запланирована на " + getFutureDate(5)));
    }

    @Test
    @DisplayName("Should submit form with hyphen in name")
    void shouldSubmitWithHyphenInName() {
        $("[data-test-id=city] input").setValue("Казань");
        $("[data-test-id=date] input").doubleClick().sendKeys(Keys.DELETE, getFutureDate(7));
        $("[data-test-id=name] input").setValue("Анна-Мария Сидорова");
        $("[data-test-id=phone] input").setValue("+79272222222");
        $("[data-test-id=agreement]").click();
        $("button.button").click();

        $("[data-test-id=notification]")
                .shouldBe(visible, Duration.ofSeconds(15))
                .shouldHave(exactText("Успешно!\n" +
                        "Встреча успешно запланирована на " + getFutureDate(7)));
    }

    @Test
    @DisplayName("Should submit form with another city")
    void shouldSubmitWithDifferentCity() {
        $("[data-test-id=city] input").setValue("Екатеринбург");
        $("[data-test-id=date] input").doubleClick().sendKeys(Keys.DELETE, getFutureDate(10));
        $("[data-test-id=name] input").setValue("Петр Петров");
        $("[data-test-id=phone] input").setValue("+79273333333");
        $("[data-test-id=agreement]").click();
        $("button.button").click();

        $("[data-test-id=notification]")
                .shouldBe(visible, Duration.ofSeconds(15))
                .shouldHave(exactText("Успешно!\n" +
                        "Встреча успешно запланирована на " + getFutureDate(10)));
    }

    private String getFutureDate(int days) {
        return LocalDate.now().plusDays(days).format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
    }
}